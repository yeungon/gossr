// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_category.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, created_at
FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const insertCategory = `-- name: InsertCategory :one
INSERT INTO categories (name, created_at)
VALUES ($1, $2)
RETURNING id, name, created_at
`

type InsertCategoryParams struct {
	Name      string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, insertCategory, arg.Name, arg.CreatedAt)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_at
FROM categories
ORDER BY id
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
